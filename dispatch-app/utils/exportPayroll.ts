import * as Sharing from "expo-sharing";
import * as FileSystem from "expo-file-system";

/**
 * Payroll Export Utilities
 *
 * Generates Markdown tables and CSV files from payroll data.
 * Handles file saving and sharing via React Native APIs.
 */

export interface PayrollReportData {
  startDate: string;
  endDate: string;
  generatedAt: string;
  config: {
    baseRate: number;
    noShowDeduction: number;
    preCancelDeduction: number;
  };
  drivers: Array<{
    fullName: string;
    employeeId: string;
    totalTrips: number;
    amTrips: number;
    pmTrips: number;
    completedTrips: number;
    noShowTrips: number;
    cancelledTrips: number;
    totalPay: number;
  }>;
  totals: {
    totalTrips: number;
    completedTrips: number;
    noShowTrips: number;
    cancelledTrips: number;
    totalPay: number;
  };
}

/**
 * Generate Markdown table from payroll report data
 */
export const generateMarkdownTable = (data: PayrollReportData): string => {
  const { startDate, endDate, drivers, totals, config, generatedAt } = data;

  // Header
  let markdown = `# Payroll Report: ${startDate} to ${endDate}\n\n`;
  markdown += `**Generated:** ${new Date(generatedAt).toLocaleString()}\n\n`;

  // Config info
  markdown += `## Pay Rates\n`;
  markdown += `- **Base Rate:** $${config.baseRate} per completed trip\n`;
  markdown += `- **No-Show Rate:** $${config.baseRate - config.noShowDeduction} (base - $${config.noShowDeduction})\n`;
  markdown += `- **Pre-Cancel Rate:** $${config.baseRate - config.preCancelDeduction} (base - $${config.preCancelDeduction})\n\n`;

  // Summary table
  markdown += `## Driver Summary\n\n`;
  markdown += `| Driver | Employee ID | Total Trips | AM | PM | Pick-ups | No-Gos | Pre-Cancels | Total Pay |\n`;
  markdown += `|--------|-------------|-------------|----|----|----------|---------|-------------|----------|\n`;

  drivers.forEach((driver) => {
    markdown += `| ${driver.fullName} | ${driver.employeeId} | ${driver.totalTrips} | ${driver.amTrips} | ${driver.pmTrips} | ${driver.completedTrips} | ${driver.noShowTrips} | ${driver.cancelledTrips} | $${driver.totalPay.toFixed(2)} |\n`;
  });

  // Totals row
  markdown += `| **TOTALS** | | **${totals.totalTrips}** | | | **${totals.completedTrips}** | **${totals.noShowTrips}** | **${totals.cancelledTrips}** | **$${totals.totalPay.toFixed(2)}** |\n\n`;

  // Footer
  markdown += `---\n`;
  markdown += `*Report generated by Go Happy Cab Dispatch App*\n`;

  return markdown;
};

/**
 * Generate CSV from payroll report data
 */
export const generateCSV = (data: PayrollReportData): string => {
  const { drivers } = data;

  // Header row
  let csv = "Driver,Employee ID,Total Trips,AM Trips,PM Trips,Pick-ups,No-Gos,Pre-Cancels,Total Pay\n";

  // Data rows
  drivers.forEach((driver) => {
    csv += `"${driver.fullName}","${driver.employeeId}",${driver.totalTrips},${driver.amTrips},${driver.pmTrips},${driver.completedTrips},${driver.noShowTrips},${driver.cancelledTrips},${driver.totalPay.toFixed(2)}\n`;
  });

  return csv;
};

/**
 * Save and share a file
 *
 * @param content - File content (string)
 * @param filename - Name of the file
 * @param mimeType - MIME type for sharing
 * @returns Success status
 */
export const saveAndShareFile = async (
  content: string,
  filename: string,
  mimeType: string = "text/plain"
): Promise<{ success: boolean; error?: string }> => {
  try {
    // Create file path in cache directory
    const fileUri = `${FileSystem.cacheDirectory}${filename}`;

    // Write file to cache
    await FileSystem.writeAsStringAsync(fileUri, content, {
      encoding: FileSystem.EncodingType.UTF8,
    });

    // Check if sharing is available
    const isAvailable = await Sharing.isAvailableAsync();

    if (!isAvailable) {
      return {
        success: false,
        error: "Sharing is not available on this device",
      };
    }

    // Share the file
    await Sharing.shareAsync(fileUri, {
      mimeType,
      dialogTitle: `Share ${filename}`,
      UTI: mimeType,
    });

    return { success: true };
  } catch (error) {
    console.error("Error saving/sharing file:", error);
    return {
      success: false,
      error: error instanceof Error ? error.message : "Unknown error",
    };
  }
};

/**
 * Export payroll report as Markdown
 */
export const exportMarkdown = async (
  data: PayrollReportData
): Promise<{ success: boolean; error?: string }> => {
  const markdown = generateMarkdownTable(data);
  const filename = `payroll_${data.startDate}_${data.endDate}.md`;
  return saveAndShareFile(markdown, filename, "text/markdown");
};

/**
 * Export payroll report as CSV
 */
export const exportCSV = async (
  data: PayrollReportData
): Promise<{ success: boolean; error?: string }> => {
  const csv = generateCSV(data);
  const filename = `payroll_${data.startDate}_${data.endDate}.csv`;
  return saveAndShareFile(csv, filename, "text/csv");
};
